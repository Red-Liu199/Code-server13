INFO:root:hotel database path:db/hotel_db_processed.json
INFO:root:Added special tokens to gpt tokenizer.
INFO:root:Reading encoded data from ./data/multi-woz-2.1-processed/new_db_se_blank_encoded.data.json
INFO:root:train size:8434, dev size:999, test size:1000
INFO:root:[50314, 50315, 50313, 50308, 50309, 50307]
INFO:root:Prior model loaded from ../distilgpt2
INFO:root:***** Running turn-level training *****
INFO:root:  Num Training steps(one turn in a batch of dialogs) per epoch = 14195
INFO:root:  Num Turns = 56565
INFO:root:  Num Dialogs = 8421
INFO:root:  Num Epochs = 40
INFO:root:  Batch size  = 4
INFO:root:  Gradient Accumulation steps = 8
INFO:root:  Total optimization steps = 70975
INFO:root:hotel database path:db/hotel_db_processed.json
INFO:root:Added special tokens to gpt tokenizer.
INFO:root:Reading encoded data from ./data/multi-woz-2.1-processed/new_db_se_blank_encoded.data.json
INFO:root:train size:8434, dev size:999, test size:1000
INFO:root:[50314, 50315, 50313, 50308, 50309, 50307]
INFO:root:Prior model loaded from ../distilgpt2
INFO:root:***** Running turn-level training *****
INFO:root:  Num Training steps(one turn in a batch of dialogs) per epoch = 14195
INFO:root:  Num Turns = 56565
INFO:root:  Num Dialogs = 8421
INFO:root:  Num Epochs = 40
INFO:root:  Batch size  = 4
INFO:root:  Gradient Accumulation steps = 8
INFO:root:  Total optimization steps = 70975
INFO:root:Input examples:
INFO:root:<sos_u>  i need a train for sunday please. i prefer 1 that arrives by 20:15 <eos_u> <sos_b> [train]  day sunday arrive 20:15 <eos_b> <sos_db> [db_3] <eos_db> <sos_a> [train] [inform]  choice [request]  destination <eos_a> <sos_r>  we have [value_choice]  those! where is your destination? <eos_r>
INFO:root:Input examples:
INFO:root:<sos_b> [train]  day sunday arrive 20:15 <eos_b> <sos_u>  i am heading to birmingham new street. <eos_u> <sos_b> [train]  day sunday arrive 20:15 destination birmingham new street <eos_b> <sos_db> [db_1] <eos_db> <sos_a> [train] [inform]  arrive id [select] <eos_a> <sos_r> [value_id]  arrives by [value_arrive] . does that work for you? <eos_r>
INFO:root:hotel database path:db/hotel_db_processed.json
INFO:root:Added special tokens to gpt tokenizer.
INFO:root:Reading encoded data from ./data/multi-woz-2.1-processed/new_db_se_blank_encoded.data.json
INFO:root:train size:8434, dev size:999, test size:1000
INFO:root:[50314, 50315, 50313, 50308, 50309, 50307]
INFO:root:Prior model loaded from ../distilgpt2
INFO:root:***** Running turn-level training *****
INFO:root:  Num Training steps(one turn in a batch of dialogs) per epoch = 14195
INFO:root:  Num Turns = 56565
INFO:root:  Num Dialogs = 8421
INFO:root:  Num Epochs = 40
INFO:root:  Batch size  = 4
INFO:root:  Gradient Accumulation steps = 8
INFO:root:  Total optimization steps = 70975
INFO:root:Input examples:
INFO:root:<sos_u>  i need a train for sunday please. i prefer 1 that arrives by 20:15 <eos_u> <sos_b> [train]  day sunday arrive 20:15 <eos_b> <sos_db> [db_3] <eos_db> <sos_a> [train] [inform]  choice [request]  destination <eos_a> <sos_r>  we have [value_choice]  those! where is your destination? <eos_r>
INFO:root:Input examples:
INFO:root:<sos_b> [train]  day sunday arrive 20:15 <eos_b> <sos_u>  i am heading to birmingham new street. <eos_u> <sos_b> [train]  day sunday arrive 20:15 destination birmingham new street <eos_b> <sos_db> [db_1] <eos_db> <sos_a> [train] [inform]  arrive id [select] <eos_a> <sos_r> [value_id]  arrives by [value_arrive] . does that work for you? <eos_r>
INFO:root:Input examples:
INFO:root:<sos_r> [value_id]  arrives by [value_arrive] . does that work for you? <eos_r> <sos_u>  yes, that would be fine. i 'll need the price, trainid, and departure time, please? <eos_u> <sos_b> [train]  day sunday arrive 20:15 destination birmingham new street <eos_b> <sos_db> [db_1] <eos_db> <sos_a> [train] [inform]  price leave departure <eos_a> <sos_r>  the train will depart [value_departure]  at [value_leave]  and the price is [value_price] . <eos_r>
INFO:root:Input examples:
INFO:root:<sos_r>  the train will depart [value_departure]  at [value_leave]  and the price is [value_price] . <eos_r> <sos_u>  i would also like to find a nice concerthall in the middle of town. <eos_u> <sos_b> [attraction]  type concert hall area centre [train]  day sunday arrive 20:15 destination birmingham new street <eos_b> <sos_db> [db_1] <eos_db> <sos_a> [attraction] [inform]  address type area name <eos_a> <sos_r>  the [value_type]  in the [value_area]  is [value_name]  located at [value_address] . <eos_r>
INFO:root:hotel database path:db/hotel_db_processed.json
INFO:root:Added special tokens to gpt tokenizer.
INFO:root:Reading encoded data from ./data/multi-woz-2.1-processed/new_db_se_blank_encoded.data.json
INFO:root:train size:8434, dev size:999, test size:1000
INFO:root:[50314, 50315, 50313, 50308, 50309, 50307]
INFO:root:Prior model loaded from ../distilgpt2
INFO:root:***** Running turn-level training *****
INFO:root:  Num Training steps(one turn in a batch of dialogs) per epoch = 14195
INFO:root:  Num Turns = 56565
INFO:root:  Num Dialogs = 8421
INFO:root:  Num Epochs = 40
INFO:root:  Batch size  = 4
INFO:root:  Gradient Accumulation steps = 8
INFO:root:  Total optimization steps = 70975
INFO:root:Input examples:
INFO:root:<sos_u>  i need a train for sunday please. i prefer 1 that arrives by 20:15 <eos_u> <sos_b> [train]  day sunday arrive 20:15 <eos_b> <sos_db> [db_3] <eos_db> <sos_a> [train] [inform]  choice [request]  destination <eos_a> <sos_r>  we have [value_choice]  those! where is your destination? <eos_r>
INFO:root:Input examples:
INFO:root:<sos_b> [train]  day sunday arrive 20:15 <eos_b> <sos_u>  i am heading to birmingham new street. <eos_u> <sos_b> [train]  day sunday arrive 20:15 destination birmingham new street <eos_b> <sos_db> [db_1] <eos_db> <sos_a> [train] [inform]  arrive id [select] <eos_a> <sos_r> [value_id]  arrives by [value_arrive] . does that work for you? <eos_r>
INFO:root:Input examples:
INFO:root:<sos_b> [train]  day sunday arrive 20:15 destination birmingham new street <eos_b> <sos_u>  yes, that would be fine. i 'll need the price, trainid, and departure time, please? <eos_u> <sos_b> [train]  day sunday arrive 20:15 destination birmingham new street <eos_b> <sos_db> [db_1] <eos_db> <sos_a> [train] [inform]  price leave departure <eos_a> <sos_r>  the train will depart [value_departure]  at [value_leave]  and the price is [value_price] . <eos_r>
INFO:root:Input examples:
INFO:root:<sos_b> [train]  day sunday arrive 20:15 destination birmingham new street <eos_b> <sos_u>  i would also like to find a nice concerthall in the middle of town. <eos_u> <sos_b> [attraction]  type concert hall area centre [train]  day sunday arrive 20:15 destination birmingham new street <eos_b> <sos_db> [db_1] <eos_db> <sos_a> [attraction] [inform]  address type area name <eos_a> <sos_r>  the [value_type]  in the [value_area]  is [value_name]  located at [value_address] . <eos_r>
INFO:root:hotel database path:db/hotel_db_processed.json
INFO:root:Added special tokens to gpt tokenizer.
INFO:root:Reading encoded data from ./data/multi-woz-2.1-processed/new_db_se_blank_encoded.data.json
INFO:root:train size:8434, dev size:999, test size:1000
INFO:root:[50314, 50315, 50313, 50308, 50309, 50307]
INFO:root:Prior model loaded from ../distilgpt2
INFO:root:***** Running turn-level training *****
INFO:root:  Num Training steps(one turn in a batch of dialogs) per epoch = 7140
INFO:root:  Num Turns = 56565
INFO:root:  Num Dialogs = 8421
INFO:root:  Num Epochs = 40
INFO:root:  Batch size  = 8
INFO:root:  Gradient Accumulation steps = 4
INFO:root:  Total optimization steps = 71400
INFO:root:Input examples:
INFO:root:<sos_u>  i am looking for a hotel with free wifi. <eos_u> <sos_b> [hotel]  internet yes <eos_b> <sos_db> [db_3] <eos_db> <sos_a> [hotel] [inform]  internet choice <eos_a> <sos_r>  there are [value_choice]  hotel -s with free wifi, do you have any other things you require in a hotel? <eos_r>
INFO:root:Input examples:
INFO:root:<sos_b> [hotel]  internet yes <eos_b> <sos_u>  i would like a 4 star hotel, and i don't need free parking. <eos_u> <sos_b> [hotel]  internet yes parking dontcare stars 4 <eos_b> <sos_db> [db_3] <eos_db> <sos_a> [hotel] [inform]  name <eos_a> <sos_r>  how about [value_name] , unless you have any other specifics. <eos_r>
INFO:root:Input examples:
INFO:root:<sos_b> [hotel]  internet yes parking dontcare stars 4 <eos_b> <sos_u>  could you recommend me a hotel that is cheap? <eos_u> <sos_b> [hotel]  internet yes parking dontcare stars 4 <eos_b> <sos_db> [db_3] <eos_db> <sos_a> [hotel] [inform]  stars price name internet <eos_a> <sos_r>  how about [value_name] ? it has [value_stars]  stars, is in the [value_price]  price range and has internet. <eos_r>
INFO:root:Input examples:
INFO:root:<sos_b> [hotel]  internet yes parking dontcare stars 4 <eos_b> <sos_u>  hmm, let me see... i think maybe a moderate -ly priced 4 star hotel might be better. do you show any availabe? <eos_u> <sos_b> [hotel]  internet yes parking dontcare stars 4 pricerange moderate <eos_b> <sos_db> [db_3] <eos_db> <sos_a> [hotel] [recommend]  name price internet parking stars <eos_a> <sos_r>  i would recommend [value_name]  which is [value_stars]  stars, [value_price]  and offers both free wifi and parking. <eos_r>
INFO:root:Train epoch time: 10.50 min, epoch loss: 51903.4725
INFO:root:Train epoch time: 10.50 min, epoch loss: 10807.5941
INFO:root:Train epoch time: 10.35 min, epoch loss: 8285.4195
INFO:root:Train epoch time: 10.32 min, epoch loss: 7439.1696
INFO:root:Train epoch time: 10.51 min, epoch loss: 6990.9418
INFO:root:Train epoch time: 10.51 min, epoch loss: 6699.7351
INFO:root:hotel database path:db/hotel_db_processed.json
INFO:root:Added special tokens to gpt tokenizer.
INFO:root:Reading encoded data from ./data/multi-woz-2.1-processed/new_db_se_blank_encoded.data.json
INFO:root:train size:8434, dev size:999, test size:1000
INFO:root:[50314, 50315, 50313, 50308, 50309, 50307]
INFO:root:Prior model loaded from ../distilgpt2
INFO:root:***** Running turn-level training *****
INFO:root:  Num Training steps(one turn in a batch of dialogs) per epoch = 7140
INFO:root:  Num Turns = 56565
INFO:root:  Num Dialogs = 8421
INFO:root:  Num Epochs = 40
INFO:root:  Batch size  = 8
INFO:root:  Gradient Accumulation steps = 4
INFO:root:  Total optimization steps = 71400
INFO:root:Input examples:
INFO:root:<sos_u>  i am looking for a hotel with free wifi. <eos_u> <sos_b> [hotel]  internet yes <eos_b> <sos_db> [db_3] <eos_db> <sos_a> [hotel] [inform]  internet choice <eos_a> <sos_r>  there are [value_choice]  hotel -s with free wifi, do you have any other things you require in a hotel? <eos_r>
INFO:root:Input examples:
INFO:root:<sos_b> [hotel]  internet yes <eos_b> <sos_u>  i would like a 4 star hotel, and i don't need free parking. <eos_u> <sos_b> [hotel]  internet yes parking dontcare stars 4 <eos_b> <sos_db> [db_3] <eos_db> <sos_a> [hotel] [inform]  name <eos_a> <sos_r>  how about [value_name] , unless you have any other specifics. <eos_r>
INFO:root:Input examples:
INFO:root:<sos_b> [hotel]  internet yes parking dontcare stars 4 <eos_b> <sos_u>  could you recommend me a hotel that is cheap? <eos_u> <sos_b> [hotel]  internet yes parking dontcare stars 4 <eos_b> <sos_db> [db_3] <eos_db> <sos_a> [hotel] [inform]  stars price name internet <eos_a> <sos_r>  how about [value_name] ? it has [value_stars]  stars, is in the [value_price]  price range and has internet. <eos_r>
INFO:root:Input examples:
INFO:root:<sos_b> [hotel]  internet yes parking dontcare stars 4 <eos_b> <sos_u>  hmm, let me see... i think maybe a moderate -ly priced 4 star hotel might be better. do you show any availabe? <eos_u> <sos_b> [hotel]  internet yes parking dontcare stars 4 pricerange moderate <eos_b> <sos_db> [db_3] <eos_db> <sos_a> [hotel] [recommend]  name price internet parking stars <eos_a> <sos_r>  i would recommend [value_name]  which is [value_stars]  stars, [value_price]  and offers both free wifi and parking. <eos_r>
INFO:root:hotel database path:db/hotel_db_processed.json
INFO:root:Added special tokens to gpt tokenizer.
INFO:root:Reading encoded data from ./data/multi-woz-2.1-processed/new_db_se_blank_encoded.data.json
INFO:root:train size:8434, dev size:999, test size:1000
INFO:root:[50314, 50315, 50313, 50308, 50309, 50307]
INFO:root:Prior model loaded from ../distilgpt2
INFO:root:***** Running turn-level training *****
INFO:root:  Num Training steps(one turn in a batch of dialogs) per epoch = 7140
INFO:root:  Num Turns = 56565
INFO:root:  Num Dialogs = 8421
INFO:root:  Num Epochs = 40
INFO:root:  Batch size  = 8
INFO:root:  Gradient Accumulation steps = 4
INFO:root:  Total optimization steps = 71400
INFO:root:Input examples:
INFO:root:<sos_u>  i am looking for a hotel with free wifi. <eos_u> <sos_b> [hotel]  internet yes <eos_b> <sos_db> [db_3] <eos_db> <sos_a> [hotel] [inform]  internet choice <eos_a> <sos_r>  there are [value_choice]  hotel -s with free wifi, do you have any other things you require in a hotel? <eos_r>
INFO:root:Input examples:
INFO:root:<sos_b> [hotel]  internet yes <eos_b> <sos_u>  i would like a 4 star hotel, and i don't need free parking. <eos_u> <sos_b> [hotel]  internet yes parking dontcare stars 4 <eos_b> <sos_db> [db_3] <eos_db> <sos_a> [hotel] [inform]  name <eos_a> <sos_r>  how about [value_name] , unless you have any other specifics. <eos_r>
INFO:root:Input examples:
INFO:root:<sos_b> [hotel]  internet yes parking dontcare stars 4 <eos_b> <sos_u>  could you recommend me a hotel that is cheap? <eos_u> <sos_b> [hotel]  internet yes parking dontcare stars 4 <eos_b> <sos_db> [db_3] <eos_db> <sos_a> [hotel] [inform]  stars price name internet <eos_a> <sos_r>  how about [value_name] ? it has [value_stars]  stars, is in the [value_price]  price range and has internet. <eos_r>
INFO:root:Input examples:
INFO:root:<sos_b> [hotel]  internet yes parking dontcare stars 4 <eos_b> <sos_u>  hmm, let me see... i think maybe a moderate -ly priced 4 star hotel might be better. do you show any availabe? <eos_u> <sos_b> [hotel]  internet yes parking dontcare stars 4 pricerange moderate <eos_b> <sos_db> [db_3] <eos_db> <sos_a> [hotel] [recommend]  name price internet parking stars <eos_a> <sos_r>  i would recommend [value_name]  which is [value_stars]  stars, [value_price]  and offers both free wifi and parking. <eos_r>
INFO:root:Train epoch time: 10.53 min, epoch loss: 51903.4725
INFO:root:Train epoch time: 10.43 min, epoch loss: 10807.5941
INFO:root:Train epoch time: 10.35 min, epoch loss: 8285.4195
INFO:root:Train epoch time: 10.32 min, epoch loss: 7439.1696
INFO:root:hotel database path:db/hotel_db_processed.json
INFO:root:Added special tokens to gpt tokenizer.
INFO:root:Reading encoded data from ./data/multi-woz-2.1-processed/new_db_se_blank_encoded.data.json
INFO:root:train size:8434, dev size:999, test size:1000
INFO:root:[50314, 50315, 50313, 50308, 50309, 50307]
INFO:root:Prior model loaded from ../distilgpt2
INFO:root:***** Running turn-level training *****
INFO:root:  Num Training steps(one turn in a batch of dialogs) per epoch = 7140
INFO:root:  Num Turns = 56565
INFO:root:  Num Dialogs = 8421
INFO:root:  Num Epochs = 40
INFO:root:  Batch size  = 8
INFO:root:  Gradient Accumulation steps = 4
INFO:root:  Total optimization steps = 71400
INFO:root:Input examples:
INFO:root:<sos_u>  i am looking for a hotel with free wifi. <eos_u> <sos_b> [hotel]  internet yes <eos_b> <sos_db> [db_3] <eos_db> <sos_a> [hotel] [inform]  internet choice <eos_a> <sos_r>  there are [value_choice]  hotel -s with free wifi, do you have any other things you require in a hotel? <eos_r>
INFO:root:Input examples:
INFO:root:<sos_b> [hotel]  internet yes <eos_b> <sos_u>  i would like a 4 star hotel, and i don't need free parking. <eos_u> <sos_b> [hotel]  internet yes parking dontcare stars 4 <eos_b> <sos_db> [db_3] <eos_db> <sos_a> [hotel] [inform]  name <eos_a> <sos_r>  how about [value_name] , unless you have any other specifics. <eos_r>
INFO:root:Input examples:
INFO:root:<sos_b> [hotel]  internet yes parking dontcare stars 4 <eos_b> <sos_u>  could you recommend me a hotel that is cheap? <eos_u> <sos_b> [hotel]  internet yes parking dontcare stars 4 <eos_b> <sos_db> [db_3] <eos_db> <sos_a> [hotel] [inform]  stars price name internet <eos_a> <sos_r>  how about [value_name] ? it has [value_stars]  stars, is in the [value_price]  price range and has internet. <eos_r>
INFO:root:Input examples:
INFO:root:<sos_b> [hotel]  internet yes parking dontcare stars 4 <eos_b> <sos_u>  hmm, let me see... i think maybe a moderate -ly priced 4 star hotel might be better. do you show any availabe? <eos_u> <sos_b> [hotel]  internet yes parking dontcare stars 4 pricerange moderate <eos_b> <sos_db> [db_3] <eos_db> <sos_a> [hotel] [recommend]  name price internet parking stars <eos_a> <sos_r>  i would recommend [value_name]  which is [value_stars]  stars, [value_price]  and offers both free wifi and parking. <eos_r>
INFO:root:Train epoch time: 10.54 min, epoch loss: 51903.4725
INFO:root:Train epoch time: 10.66 min, epoch loss: 10807.5941
INFO:root:Train epoch time: 10.61 min, epoch loss: 8285.4195
INFO:root:Train epoch time: 10.53 min, epoch loss: 7439.1696
INFO:root:Inference time:3.726 min
INFO:root:validation [CTR] 46.29  37.78  14.74  56.77  0.349
INFO:root:validation 41.08  33.87  14.74  52.21  0.349
INFO:root:Saving model checkpoint to ./experiments_21/all_BU_sd11_lr0.0001_bs8_ga4/best_score_model
INFO:root:Train epoch time: 10.42 min, epoch loss: 6990.9418
INFO:root:Inference time:4.160 min
INFO:root:validation [CTR] 83.27  71.64  15.82  93.27  0.379
INFO:root:validation 77.76  67.13  15.82  88.26  0.379
INFO:root:Saving model checkpoint to ./experiments_21/all_BU_sd11_lr0.0001_bs8_ga4/best_score_model
INFO:root:Train epoch time: 10.42 min, epoch loss: 6699.7351
INFO:root:Inference time:4.061 min
INFO:root:validation [CTR] 79.26  71.44  16.58  91.93  0.395
INFO:root:validation 73.75  67.13  16.58  87.02  0.395
INFO:root:Train epoch time: 10.32 min, epoch loss: 6471.5053
INFO:root:Inference time:3.784 min
INFO:root:validation [CTR] 79.26  68.04  16.32  89.97  0.462
INFO:root:validation 75.65  65.23  16.32  86.76  0.462
INFO:root:Train epoch time: 10.58 min, epoch loss: 6296.5230
INFO:root:Inference time:3.692 min
INFO:root:validation [CTR] 76.35  69.54  17.13  90.07  0.455
INFO:root:validation 73.35  67.03  17.13  87.32  0.455
INFO:root:Train epoch time: 10.32 min, epoch loss: 6124.2415
INFO:root:Inference time:3.722 min
INFO:root:validation [CTR] 64.93  56.91  16.57  77.49  0.466
INFO:root:validation 62.93  55.01  16.57  75.54  0.466
INFO:root:early stop count:4
INFO:root:Train epoch time: 10.32 min, epoch loss: 5960.5314
INFO:root:Inference time:3.604 min
INFO:root:validation [CTR] 73.55  68.04  17.84  88.63  0.477
INFO:root:validation 71.64  66.23  17.84  86.77  0.477
INFO:root:early stop count:3
INFO:root:Train epoch time: 10.39 min, epoch loss: 5824.9678
INFO:root:Inference time:3.627 min
INFO:root:validation [CTR] 71.04  65.23  16.67  84.81  0.476
INFO:root:validation 68.64  62.83  16.67  82.40  0.476
INFO:root:early stop count:2
INFO:root:Train epoch time: 10.40 min, epoch loss: 5700.7570
INFO:root:Inference time:3.939 min
INFO:root:validation [CTR] 82.97  76.45  17.59  97.29  0.482
INFO:root:validation 82.16  75.65  17.59  96.49  0.482
INFO:root:Saving model checkpoint to ./experiments_21/all_BU_sd11_lr0.0001_bs8_ga4/best_score_model
INFO:root:Train epoch time: 10.46 min, epoch loss: 5587.6827
INFO:root:Inference time:3.606 min
INFO:root:validation [CTR] 75.45  68.44  16.20  88.14  0.499
INFO:root:validation 74.35  67.64  16.20  87.19  0.499
INFO:root:early stop count:4
INFO:root:Train epoch time: 10.36 min, epoch loss: 5487.1469
INFO:root:Inference time:3.772 min
INFO:root:validation [CTR] 77.35  68.74  17.66  90.71  0.482
INFO:root:validation 75.45  66.83  17.66  88.81  0.482
INFO:root:early stop count:3
INFO:root:Train epoch time: 10.34 min, epoch loss: 5391.9310
INFO:root:Inference time:3.898 min
INFO:root:validation [CTR] 75.75  69.04  17.73  90.13  0.486
INFO:root:validation 73.35  66.63  17.73  87.72  0.486
INFO:root:early stop count:2
INFO:root:Train epoch time: 10.34 min, epoch loss: 5298.3014
INFO:root:Inference time:3.801 min
INFO:root:validation [CTR] 77.56  70.64  16.38  90.47  0.479
INFO:root:validation 75.15  68.24  16.38  88.07  0.479
INFO:root:early stop count:1
INFO:root:Train epoch time: 10.55 min, epoch loss: 5210.1328
INFO:root:Inference time:3.814 min
INFO:root:validation [CTR] 76.15  70.14  17.30  90.44  0.482
INFO:root:validation 74.75  68.74  17.30  89.04  0.482
INFO:root:early stop count:0
INFO:root:Train epoch time: 10.35 min, epoch loss: 5130.0999
INFO:root:Inference time:3.783 min
INFO:root:validation [CTR] 82.87  77.76  17.45  97.76  0.481
INFO:root:validation 80.76  75.55  17.45  95.61  0.481
INFO:root:early stop count:-1
INFO:root:Train epoch time: 10.39 min, epoch loss: 5050.2348
INFO:root:Inference time:3.916 min
INFO:root:validation [CTR] 80.56  74.55  17.69  95.24  0.481
INFO:root:validation 78.46  72.95  17.69  93.39  0.481
INFO:root:early stop count:-2
INFO:root:Train epoch time: 10.33 min, epoch loss: 4974.4860
INFO:root:Inference time:3.855 min
INFO:root:validation [CTR] 79.36  72.95  18.09  94.24  0.484
INFO:root:validation 77.76  71.34  18.09  92.64  0.484
INFO:root:early stop count:-3
INFO:root:Train epoch time: 10.33 min, epoch loss: 4903.1107
INFO:root:Inference time:3.831 min
INFO:root:validation [CTR] 78.06  71.64  17.84  92.69  0.488
INFO:root:validation 76.45  70.04  17.84  91.09  0.488
INFO:root:early stop count:-4
INFO:root:Train epoch time: 10.33 min, epoch loss: 4833.8909
INFO:root:Inference time:3.755 min
INFO:root:validation [CTR] 81.46  74.45  16.91  94.87  0.487
INFO:root:validation 80.36  73.15  16.91  93.67  0.487
INFO:root:early stop count:-5
INFO:root:Train epoch time: 10.47 min, epoch loss: 4767.8668
INFO:root:Inference time:3.702 min
INFO:root:validation [CTR] 80.86  74.95  17.58  95.49  0.492
INFO:root:validation 78.86  72.85  17.58  93.44  0.492
INFO:root:early stop count:-6
INFO:root:Train epoch time: 10.31 min, epoch loss: 4707.7959
INFO:root:Inference time:3.734 min
INFO:root:validation [CTR] 80.46  73.45  17.24  94.20  0.485
INFO:root:validation 77.96  70.94  17.24  91.69  0.485
INFO:root:early stop count:-7
INFO:root:Train epoch time: 10.31 min, epoch loss: 4648.1209
INFO:root:Inference time:3.632 min
INFO:root:validation [CTR] 82.87  75.95  16.52  95.92  0.491
INFO:root:validation 81.96  74.95  16.52  94.97  0.491
INFO:root:early stop count:-8
INFO:root:Train epoch time: 10.31 min, epoch loss: 4591.4457
INFO:root:Inference time:3.713 min
INFO:root:validation [CTR] 79.26  72.34  17.11  92.91  0.487
INFO:root:validation 77.35  70.74  17.11  91.16  0.487
INFO:root:early stop count:-9
INFO:root:Train epoch time: 10.30 min, epoch loss: 4534.5425
INFO:root:Inference time:3.715 min
INFO:root:validation [CTR] 78.36  71.34  17.19  92.04  0.489
INFO:root:validation 76.65  69.54  17.19  90.29  0.489
INFO:root:early stop count:-10
INFO:root:Train epoch time: 10.31 min, epoch loss: 4484.4061
INFO:root:Inference time:3.810 min
INFO:root:validation [CTR] 81.36  73.95  16.92  94.58  0.474
INFO:root:validation 80.36  72.75  16.92  93.48  0.474
INFO:root:early stop count:-11
INFO:root:Train epoch time: 10.32 min, epoch loss: 4440.0395
INFO:root:Inference time:3.746 min
INFO:root:validation [CTR] 80.56  73.85  16.77  93.98  0.489
INFO:root:validation 79.26  72.44  16.77  92.62  0.489
INFO:root:early stop count:-12
INFO:root:Train epoch time: 10.33 min, epoch loss: 4394.7877
INFO:root:Inference time:3.746 min
INFO:root:validation [CTR] 81.66  75.75  17.34  96.04  0.479
INFO:root:validation 80.16  74.05  17.34  94.44  0.479
INFO:root:early stop count:-13
INFO:root:Train epoch time: 10.45 min, epoch loss: 4346.9032
INFO:root:Inference time:3.708 min
INFO:root:validation [CTR] 79.36  72.24  16.99  92.79  0.486
INFO:root:validation 77.56  70.54  16.99  91.04  0.486
INFO:root:early stop count:-14
INFO:root:Train epoch time: 10.31 min, epoch loss: 4311.2148
INFO:root:Inference time:3.711 min
INFO:root:validation [CTR] 80.66  73.85  17.07  94.33  0.484
INFO:root:validation 78.96  72.24  17.07  92.68  0.484
INFO:root:early stop count:-15
INFO:root:Train epoch time: 10.31 min, epoch loss: 4271.4193
INFO:root:Inference time:3.712 min
INFO:root:validation [CTR] 82.77  75.95  17.28  96.63  0.488
INFO:root:validation 80.86  74.05  17.28  94.73  0.488
INFO:root:early stop count:-16
INFO:root:Train epoch time: 10.47 min, epoch loss: 4237.8920
INFO:root:Inference time:3.693 min
INFO:root:validation [CTR] 79.36  72.34  17.09  92.94  0.481
INFO:root:validation 76.95  69.74  17.09  90.44  0.481
INFO:root:early stop count:-17
INFO:root:Train epoch time: 10.31 min, epoch loss: 4205.7891
INFO:root:Inference time:3.712 min
INFO:root:validation [CTR] 81.26  74.35  16.86  94.67  0.488
INFO:root:validation 79.26  72.24  16.86  92.61  0.488
INFO:root:early stop count:-18
INFO:root:Train epoch time: 10.31 min, epoch loss: 4175.4508
INFO:root:Inference time:3.681 min
INFO:root:validation [CTR] 81.36  75.05  16.90  95.11  0.488
INFO:root:validation 79.26  72.95  16.90  93.00  0.488
INFO:root:early stop count:-19
INFO:root:Train epoch time: 10.31 min, epoch loss: 4153.3109
INFO:root:Inference time:3.690 min
INFO:root:validation [CTR] 80.16  73.35  17.13  93.88  0.483
INFO:root:validation 78.26  71.44  17.13  91.98  0.483
INFO:root:early stop count:-20
INFO:root:Train epoch time: 10.31 min, epoch loss: 4126.8152
INFO:root:Inference time:3.703 min
INFO:root:validation [CTR] 80.26  73.05  16.99  93.64  0.483
INFO:root:validation 78.36  71.04  16.99  91.69  0.483
INFO:root:early stop count:-21
INFO:root:Train epoch time: 10.31 min, epoch loss: 4109.5921
INFO:root:Inference time:3.674 min
INFO:root:validation [CTR] 80.76  73.45  17.08  94.19  0.485
INFO:root:validation 78.76  71.34  17.08  92.13  0.485
INFO:root:early stop count:-22
INFO:root:Train epoch time: 10.31 min, epoch loss: 4094.6951
INFO:root:Inference time:3.689 min
INFO:root:validation [CTR] 80.56  73.55  17.01  94.06  0.484
INFO:root:validation 78.26  71.14  17.01  91.71  0.484
INFO:root:early stop count:-23
